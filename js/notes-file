// $(document).ready(function(){
//   console.log('loaded');

//   // Below makes it a global game const
//   const game = {
//     count: 0,
//     possibilities: ['#8A2BE2', '#00FF00', '#40E0D0', '#orange', '#FF33CC', '#yellow'],
//     currentGame: [],
//     player: []
//   };
//   // Making a new game
//   game.newGame = function () {
//     // clearing the game
//     game.clearGame();
//   };
//
//   game.clearGame = function clearGame() {
//     game.currentGame = [];
//     game.count = 0;
//     game.addCount();
//   };
//
//   // Setting the intervals of the moves
//   game.showMoves = function showMoves() {
//     var i = 0;
//     var moves = setInterval(function(){
//       game.playGame(game.currentGame[i]);
//       i++;
//       if (i >=game.currentGame.length) {
//         clearInterval(moves);
//       }
//     }, 600);
//
//     game.clearPlayer();
//   };
//
//   // Turns the circles into the colour using the CSS method
//   game.shade = function shade(name) {
//     console.log(name);
//     switch(name) {
//       case'#lime':
//       $(name).css('background-color', '#00FF00');
//       break;
//       case'#violet':
//       $(name).css('background-color', '#8A2BE2');
//       break;
//       case'#Turquoise':
//       $(name).css('background-color', '#40E0D0');
//       break;
//       case'#pink':
//       $(name).css('background-color', '#FF33CC');
//       break;
//       case'#orange':
//       $(name).css('background-color', 'orange');
//       break;
//       case'#yellow':
//       $(name).css('background-color', 'yellow');
//     }
//   };
//
//   // Plays the game
//   game.playGame = function playGame(field) {
//     // hover the circles
//     $(field).addClass('hover');
//     // switch statement shade above
//     game.shade(field);
//     setTimeout(function() {
//       $(field).removeClass('hover');
//     },300);
//   };
//   // Clearing the current players array
//   game.clearPlayer = function clearPlayer() {
//     game.player = [];
//   };
//   // Putting what the player clicks on into the top player array
//   game.addToPlayer = function addToPlayer(id) {
//     var field = '#'+id;
//     console.log(field);
//     game.player.push(field);
//     game.playerTurn(field);
//   };
//
//   // *if statement* counting if the player had got the move correct or not.
//   game.playerTurn = function playerTurn(x) {
//     if (game.player[game.player.length - 1] !== game.currentGame[game.player.length - 1]) {
//       if(game.strict){
//         alert('Sorry not right');
//         game.newGame();
//       } else {
//         alert('Wrong!');
//         game.showMoves();
//       }
//     } else {
//       game.shade(x);
//       var check = game.player.length === game.currentGame.length;
//       if (check) {
//         if(game.count === 20){
//           alert('Aced it!');
//         } else {
//           alert('Nice one, new round');
//           game.nextLevel();
//         }
//       }
//     }
//   };
//
//     // Adding the count above in order to go to the next level
//     game.nextLevel = function nextLevel() {
//       game.addCount();
//     };
//
//     // Generates the moves of the circles/colours
//   game.generateMove = function generateMove() {
//     game.currentGame.push(game.possibilities[(Math.floor(Math.random()*6))]);
//     game.showMoves();
//   };
//
//     // counter in the middle counting how many moves player has taken
//   game.addCount = function addCount() {
//     game.count++;
//     $('#clickNumber').addClass('animated fadeOutDown');
//   };
// });
//
//   //     // counter in the middle if player gets move wrong
//   //     SetTimeout(function(){
//   //       $('#clickNumber').removeClass('fadeOutDown').html(game.count).addClass('fadeInDown');
//   //     }, 200);
//   //     game.generateMove();
//   //   };
//   //
//   // game.newGame();
//

//
//
//   // $(() => {
//   //   const $square = $('.square');
//   //
//   //   for (var i = 0; i < $square.length; i++) {
//   //     $square[i].addEventListener('click', changeColor);
//   //   }
//   //   function changeColor(event){
//   //     event.style.backgroundColor =    randomColor();
//   //   }
//   //
//   // });
//

//
//   // const player = 1;
//   // $('.square').on('click', function() {
//   //   console.log('.square');
//   // });
//   //
//   // $('.square').click(function(){
//   //   if ($(this).css('background-color') === '#333333') {
//   //     $(this).css('background-color', '#1796cf');
//   //   } else {
//   //     $(this).css('background-color', '#333333');
//   //   }
//   //
//   // });
//
//   // const $square = $('#1').click(function() {
//   //   $square.removeClass('selected');
//   //   $(this).addClass('selected');
//   // });
//
//   // $(function(){
//   //   $('.square').hover(function(){
//   //     $(this).addClass('highlight');
//   //   }, function(){
//   //     $(this).removeClass('highlight');
//   //   });
//   //
//   //   $('.square').click(function(){
//   //     $(this).addClass('highlight_stay');
//   //   });
//
//   // $('.Square').click(function(event) {
//   //   switch($(event.target).attr('id')) {
//   //     case $.square:
//   //       $(event.target).css('background-color', 'red');
//   //       break;
//   //
//   //   }
//   // });


// Below makes it a global game const
  var game = {
    count: 0,
    possibilities: ['#lime','#violet', '#Turquoise', '#pink', '#orange', '#yellow'],
    currentGame: [],
    player: []
  };
// Making a new game
  game.newGame = function() {
    // clearing the game
    game.clearGame();
  };

  game.clearGame = function clearGame() {
    game.currentGame = [];
    game.count = 0;
    game.addCount();
  };

// Setting the intervals of the moves
  game.showMoves = function showMoves() {
    var i = 0;
    var moves = setInterval(function(){
      game.playGame(game.currentGame[i]);
      i++;
      if (i >= game.currentGame.length) {
        clearInterval(moves);
      }
    }, 400);

    game.clearPlayer();
  };
// Turns the circles into the colour using the CSS method
  game.shade = function shade(name) {
    console.log(name);
    switch(name) {
      case'#lime':
        $(name).css('background-color', 'lime');
        break;
      case '#violet':
        $(name).css('background-color', 'violet');
        break;
      case '#Turquoise':
        $(name).css('background-color', 'Turquoise');
        break;
      case'#pink':
        $(name).css('background-color', 'pink');
        break;
      case '#orange':
        $(name).css('background-color', 'orange');
        break;
      case '#yellow':
        $(name).css('background-color', 'yellow');
        break;
    }
  };
// Plays the game
  game.playGame = function playGame(field) {
    $(field).addClass('hover');
    game.shade(field);
    setTimeout(function(){
      $(field).removeClass('hover');
    }, 300);
  };
// Clearing the current players array
  game.clearPlayer = function clearPlayer() {
    game.player = [];
  };

  game.addToPlayer = function addToPlayer(id) {
    var field = '#'+id;
    console.log(field);
    game.player.push(field);
    game.playerTurn(field);
  };

  game.playerTurn = function playerTurn(x) {
    if (game.player[game.player.length - 1] !== game.currentGame[game.player.length - 1]) {
      if(game.strict){
        alert('Sorry not right');
        game.newGame();
      } else {
        alert('Wrong!');
        game.showMoves();
      }
    } else {
      game.shade(x);
      var check = game.player.length === game.currentGame.length;
      if (check) {
        if(game.count === 20){
          alert('Aced it!');
        } else {
          alert('Nice one, new round');
          game.nextLevel();
        }
      }
    }
  };

  game.nextLevel = function nextLevel() {
    game.addCount();
  };

  game.generateMove = function generateMove(){
    game.currentGame.push(game.possibilities[(Math.floor(Math.random()*5))]);
    game.showMoves();
  };
// Adding how many taps the player has done
  game.addCount = function addCount() {
    game.count++;
    // game.player.push()
    $('#clickNumber').addClass('animated fadeOutDown');

    setTimeout(function(){
      $('#clickNumber').removeClass('fadeOutDown').html(game.count).addClass('fadeInDown');
    }, 200);
    game.generateMove();
  };

  game.newGame();

// start screen
  // $('#StartButton').click(function () {
  //   $('#SplashScreen').hide();
  //   $('#GameCanvas').show();
  // });

css


/*#score {
  margin-top: 0;
  color: white;
  background-color: #3772FF;
  padding: 6px 20px;
  border-radius: 40px;
  display: inline-block;
  margin-bottom: 0;
}*/






/*.gameBoard {
    max-width: 500px;
    height: 500px;
    margin: 19px auto;
    margin-top: 180;
    margin-bottom: -65px;
}

.top-row {
  display: flex;
  justify-content: space-around;
  align-items: center;
  margin: 15px auto;
}

.middle-row {
  display: flex;
  justify-content: space-around;
  align-items: center;
  margin: 15px auto;
}

.bottom-row {
  display: flex;
  justify-content: space-around;
  align-items: center;
  margin: 15px auto;
}

.gamebutton {
  width: 100px;
  height: 100px;
  border-radius: 400px;
}

h2#scoreNum {
  color:#4B0082;
  font-size: 50px;
  margin-bottom: -13px;
  margin-top: -9px;
}

#lime {
  border: 2px solid #00FF00;
  margin-left: 4px;
}

#violet {
    border: 2px solid violet;
    margin-left: 100px;
    margin-top: -20px;
}

#Turquoise {
  border: 2px solid turquoise;
  margin-top: -20px;
}

#pink {
  border: 2px solid pink;
  margin-left: 106px;
  margin-top: -20px;
}

#orange {
  border: 2px solid orange;
  margin-right: 10px;
  margin-top: -20px;
}

#yellow {
  border: 2px solid yellow;
  margin-left: 195px;
  margin-top: -20px;
}


#lime:hover {
  color: #00FF00;
}

#violet:hover {
  color: #8A2BE2;
}

#Turquoise:hover{
  color:#40E0D0;
}

#pink {
  color: #FF33CC;
}

#orange:hover {
  color: orange;
}

#yellow:hover {
  color: yellow;
}

h1 {
  text-align: center;
  color: 	#FF4500;
  font-size: 89px;
  margin-top: 10px;
}

h3 {
  margin: 0px;
}

footer {
  text-align: right;
  color: red;
  margin-top: -17px;
}




/*li {
  width: 95px;
  height: 94px;
  margin: 2px;
  border-color:
  float: left;
  border-radius: 58px;
  list-style: none;
}

.gameBoard {
  width: 326px;
  height: 287px;
  margin: 0 auto;
  margin-top: 180;
}

.square {
  width: 115px;
  height: 115px;
  border: 1px solid black;
  margin: 2px;
  background-color: #E5E2DD;
  float:left;
  border-radius: 72px;
}

h1 {
  text-align: center;
  font-family: 'Rokkitt', serif;
}

.cat {
  background-color : #333333;
}

.background_selected {
  background-color : #1796cf;
}

#1 {
  background-color: pink;
